name: SecureNotes CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js with caching
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Build the application (if applicable)
      - name: Build application
        run: npm run build --if-present

      # Step 5: Inject environment secrets for SecureNotes
      - name: Set up environment variables
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          PORT: ${{ secrets.PORT }}
        run: echo "Environment variables set."

      # Step 6: Build and run the app using Docker Compose
      - name: Build and run Docker Compose
        run: |
          docker compose down
          docker compose up -d --build
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          PORT: ${{ secrets.PORT }}

      # Step 7: Wait for MongoDB and the app to be ready
      - name: Wait for services to be ready
        run: sleep 10

      # Step 8: Run application tests
      - name: Run tests
        run: npm test

      # Step 9: Clean up Docker containers
      - name: Clean up
        if: always()
        run: docker compose down
